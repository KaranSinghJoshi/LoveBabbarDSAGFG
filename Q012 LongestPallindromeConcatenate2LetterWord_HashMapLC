https://leetcode.com/problems/longest-palindrome-by-concatenating-two-letter-words/?envType=daily-question&envId=2025-05-25

class Solution {

    public String reverseStr(String ab){
        String rev = ""; 
        rev = rev + ab.charAt(1) + ab.charAt(0);
        return rev;
    }
    
// EFFICIENT APPROACH

    public int longestPalindrome(String[] words) {
        int count=0;
        int flag=0;

    HashMap <String, Integer> map = new HashMap<>();
    for (String i : words){
        if (map.containsKey(i)){
            map.put(i, map.get(i)+1);
        }
        else {
            map.put(i,1);
        }
    }

    for (String key: new HashSet<>(map.keySet())){
        if (map.containsKey(key)){
            String rev = reverseStr(key);
            if (!key.equals(rev)){
                if (map.containsKey(rev)){
                    count+=4*Math.min(map.get(key),map.get(rev));
                    map.remove(key);
                    map.remove(rev);
                }

            }
            else{
                if (map.get(key)%2==1){
                    flag = 1;
                }
                count+=4*(map.get(key)/2);
                map.remove(key);

            }
        }
        
    }

    return count+2*flag;

    }

//INEFFICIENT APPROACH

// public int longestPalindrome(String[] words) {

    //     ArrayList <String> list = new ArrayList<>();
    //     int count=0, flag=0;
    //     for (String i: words){
    //         list.add(i);
    //     }
    //     for (String i: words){
    //         String rev = reverseStr(i);
            
    //         if (!rev.equals(i)){
    //             if (list.contains(rev) && list.contains(i)){
    //             count+=4;
    //             list.remove(i);
    //             list.remove(rev);

    //             }    
    //         }
    //         else if (list.contains(i)) {
                
    //             list.remove(i);

    //                 if (list.contains(i)){
    //                 count+=4;
    //                 list.remove(i);
    //                 }

    //                 else flag=1;
    //         } 
    //     }
        
    //     return (count+ 2*flag);
    // }
    

}
